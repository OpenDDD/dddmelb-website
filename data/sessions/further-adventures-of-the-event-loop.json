{
  "id": "d5ff0735-dd69-4f34-9780-8e8e68e52710",
  "title": "Further Adventures of the Event Loop",
  "names": [
    "E. Zimmer"
  ],
  "twitters": [
    "erinjzimmer"
  ],
  "abstract": "Most JavaScript developers are probably familiar with the event loop. It’s how JavaScript handles I/O events without blocking, even though it’s single-threaded. Event callbacks are added to the task queue. The browser then takes a callback from the queue and runs it from start to finish. Then it decides to either repaint or run another callback. Simple, right?\r\n\r\nBut what about web workers? And promises? And what happens when your JavaScript isn’t running in a browser? In this talk, we’ll look at how multi-threaded event loops work, how promises differ from other callbacks, and what goes on in the Node event loop."
}